\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename sport.info
@settitle Slackware Port
@c %**end of header

@copying
Copyright (C) 2012-2013 Klaatu
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@end copying

@titlepage
@title Slackware Port
     
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
     
@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top Slackware Port
     
``Be a sport and use s-port!''

sport is a simple shell frontend to slackbuilds.org. It is modeled
after the BSD port system.

@end ifnottex
     
@menu
* Introduction::        Introduction
* Installation::        Installing Sport
* Usage::               Using Sport
* Queue::               Queue Files
* Customizing::         Customizing
* Updates::             Updating
* FAQs::                Frequently Asked Questions
* Index::               Complete index.
@end menu


@node Introduction
@chapter Introduction

@cindex about

Slackware Port (sport) is a BSD Port-, or Gentoo Emerge-, style tool
that helps you search through your collection of SlackBuilds, read
relevant files about each SlackBuild, and execute the build and
install processes.

The most prolific and uniform collection of SlackBuilds being
SlackBuilds.org, sport was mostly modeled after the structure of SB.o
but technically it should work, at least to some degree, with any
random collection of builds. BSD Ports use Makefiles, but sport does
not, mainly because it is designed to work first and foremost with
SlackBuilds.org, which does not use Makefiles.

Sport is not a package manager; this, we leave up to Slackware's built
in toolset (ie, pkgtool). Sport is just a little tool to search,
research, build, and install packages.

@node Installation
@chapter Installation

@cindex installation

If you're reading this, you've probably already installed
sport. There may still some setup to do, however, and let's review the
installation just to make sure you did it right.

@enumerate
@item
After install, you should have an executable script called sport in
/usr/sbin. It is in /usr/sbin because it belongs to system
administration, which is the rightful domain of the root user and
wheel group. You should also have the file /etc/sport.conf which is
its sole configuration file.

@enumerate
@item 
You should have a man page in /usr/man/man8 and this info file in /usr/info/
@end enumerate

@cindex slackbuilds
@item
You must have a local repository of SlackBuilds. If you have a
collection that you want to use, you may; or you can gain easy access
to a reliable collection with an rsync of the SlackBuilds.org tree.

$ su -c 'mkdir /usr/local/share/slackbuilds'
$ su -c 'rsync -av rsync://slackbuilds.org/slackbuilds/14.0 /usr/local/share/slackbuilds'

for convenience and out of BSD Port habit, I generally symlink my
slackbuild tree to:

$ su -c 'ln -s /usr/local/share/slackbuilds /usr/ports'

@cindex repository
@item 
Before you can use sport, you must define the location of your
SlackBuild repository. The default values that ship with sport are the
same as the default values for the popular sbopkg tool; if you are
using both, you probably can skip this step.

In a text editor, open the sport configuration file, /etc/sport.conf,
and set the SBOPATH and MASTER variables. For instance:

SBOPATH=/usr/ports

(Note the lack of a trailing slash.)

If you are a current user of sbopkg, you can maintain sbopkg
compatibility by setting your SBOPATH to:

SBOPATH=/usr/lib/sbopkg/SBo/xx.x

where xx.x == your current Slackware version.

For the MASTER variable, enter the source from which any updates
should be pulled:

MASTER="rsync://slackbuilds.org/slackbuilds/14.0/"

(Note the presence of a trailing slash.)

@end enumerate

You are now ready to use sport.

@node Usage
@chapter Usage

@cindex using, howto, tutorial

There are a few different ways to use sport, but it was written with
BSD Ports in mind, so its intended workflow mimics the way that the
BSD Handbook guides users through the intended usage of their Ports
system.

In general, the flow would be:

@enumerate
@item
Search for a term or package name that you want to install

@item
Read about the package you find in order to learn about what libraries
and other applications it depends on, as well as any important build
notes

@item
Download, build, install

@end enumerate

These tasks are each individual commands within the sport toolset. For
each flag, you can use every conceivable convention for switches. For
example, these would all do the same thing:

sport --search foo
sport search foo
sport s foo
sport -s foo

@table @samp
@item search|--search|-s|s
Performs a fuzzy search for some package. For example, to search for
any package containing the string ``firefly'':

# sport search firefly

or for short:

# sport s firefly

A sport search is always fuzzy.

@item list|--list|-l|l
Lists the contents of your SlackBuild tree. Without arguments, it
lists everything in the base path, for example:

# sport list

Or you can provide a folder from within your base path:

# sport list audio | less

which will list all the packages in audio plus a description of
each. You will probably want to pipe that through more or less.

@item cat|--cat|-c|c
Displays  the  README and .info files of some package. You want to do this before
building, since the README provides optional  dependency  information  and  build
instructions, and the .info file provides required dependencies.

Obviously if the package you want to install has dependencies, you should resolve
those dependencies before continuing. Unlike the BSD Ports systems, sport does
NOT resolve dependencies for you.

# cd /usr/ports/games/fortune_firefly
# sport cat fortune_firefly

or just

# sport cat .

You can also use sport functions without cd'ing into their source
directory, but in cases where there are multiple matches for what you
want to research, such as there are with, for instance, w3m, then you must
be more explicit by providing the path to the package from your
SBOPATH.

# sport cat games/fortune_firefly

or just

# sport cat g*/fortune_firefly

if you're lazy.

@item build|build-only|--build-only|-b|b
Downloads (if needed) and executes the SlackBuild for some package. It
does not install the resulting package, leaving it instead in whatever
directory the SlackBuild places it (default from SlackBuilds.org is
/tmp). Use installpkg to install the package at your leisure.

All fuzziness  is abandoned at this point, so provide the canonical
name of the package:

# sport build fortune_firefly

or if you are in the source folder:

# sport build .

If there are multiple potential matches for the package (as there
would be for a package like w3m, which would match both emacs-w3m and
w3m), then provide the category as well:

# sport build games/fortune_firefly

The build option is an additional flag to the --install option, so
using it alone would be useless.

@item install|--install|-i|i
Downloads (if needed) and executes the SlackBuild for some package, and then runs
installpkg to install it to your system.

As with cat and build commands, you can provide the path from your
current location if you are in your SlackBuilds tree; otherwise,
provide the path from SBOPATH.

The install option is pretty flexible. It can be limited to build only
with the --build-only flag. 

It can also be given an INSTALLER variable, which allows you to
control what happens after the code is compiled. The default is to
install; ergo, it uses installpkg to builds and then install. However,
you could use it to upgrade a package:

INSTALLER=upgradepkg sport install w3m 

Or even something more complex, like:

INSTALLER="upgradepkg --install-new" sport i w3m

@item clean|--clean|-n|n
Removes the directory containing the source code and SlackBuild. It of
course leaves any compressed copy of your SlackBuild directory (the
SlackBuild.org structure). If you are not using the SlackBuild.org
tree, then you should either keep your originals as compressed
archives or do you should probably not use the clean command.

@item check|--check|-k|k
A quick, fuzzy search through /var/log/packages to check if a package
is already installed. This is a convenience command for when you are
reading up on a package and want to quickly see if you already have a
dependency installed.

If you are currently in the source folder, you can, as usual, use the
current directory as the argument:

# sport check .

@item rsync|--rsync|-r|r
A quick and easy way to update your SlackBuilds tree.

@item version|--version|-v|v
Returns the Slackport version that you have installed, and then,
providing that you have a connection to the internet, notifies you
whether or not an upgrade is available.

@end table

As you can see, sport may be used from anywhere in your filesystem, emerge-style, or
you can use it as you crawl through your SlackBuild tree, port style.

@section Advanced Usage

Since sport is just a BASH script, you can use the usual BASH
conventions to add flexibility to your commands.

To pass build options through sport, provide the option (usually
defined in the README of the SlackBuild):

# WIDGETS=yes sport install foo 

To pass make flags through sport, use MAKEOPTS:

# MAKEOPTS='-j8' sport install multimedia/foo

MAKEOPTS, for what it is worth, can also be defined in the sport
configuration file, located in /etc

@node Queue
@chapter Queue

Sport (by way of BASH) inherently supports queue, or batch, files. 

Creating a queue file is easy. Just echo the package names into a
plain text file, newline delimited, in the order you wish for them to
be installed. 

You can use both the category and package name or just the package
name; queue processing is strictly non-fuzzy, so the category is not
usually necessary..

Here is an example of a simple queue file for w3m:

imlib2
w3m

Save these three lines as w3m.list (or any filename) and then have
sport process it:

# sport install $(<w3m.list)

Often you'll build a queue file from top down, meaning you'll start
with the application you want to install, and then list the
dependencies as you find out about them. In this case, you should
produce an upside-down queue file:

$ tac w3m.list > w3m.tac 

And then process it so that it  builds the dependencies first, and
then the application:

# sport i $(<w3m.tac)

By default, sport builds and installs the packages in a queue file. To
make sport only build, use the --build-only flag:

# sport install --build-only $(<w3m.list)

Of course all other sport conventions apply; you can modify whether
you are installing or upgrading:

# INSTALLER=upgradepkg sport i $(<w3m.list)

In fact, you could even keep local stashes of SlackBuilds associated
with an important application, and use sport to upgrade the
application frequently. For instance, if you find yourself updating
ffmpeg with every ffmpeg release, then place the SlackBuild for ffmpeg
and all of the codecs it needs (xvid, theora, webm, openamr,
schroedinger, and so on) in an ``ffmpeg'' directory in your home
directory, and pass both SBOPATH and INSTALLER variables:

# SBOPATH=$(pwd) INSTALLER=upgradepkg sport i $(<ffmpeg.list)

@node Customizing
@chapter Customizing

Let's say you want to make some custom changes to a SlackBuild. For
example, you might need to build GraphicsMagick without X11 support
for a server without X libs installed.

In this case, you would cd to your SlackBuilds directory, untar the
GraphicsMagick tarball, modify the SlackBuild (with --without-x, for
the record), and then run sport -i or sport -b. 

By default, sport does not clobber an existing unarchived
version of a SlackBuild.

To clear out customized scripts, you can remove the directory manually
or use 'sport clean', although sport clears ALL untarred directories,
so if you have customized versions that you want to keep, you should
not use that.

@node Updates
@chapter Updates

Updating applications in Slackware is usually done with

# upgradepkg /tmp/foo-0.2-noarch-1_SBo.tgz

Updating via sport is no different. For example, if version 99 of
foo has just been released, you would download it and use sport to build
it:

# sport install --build-only foo

And then use upgradepkg to install:

# upgradepkg /tmp/foo*99*tgz 

Or as one command:

# INSTALLER=upgradepkg sport install foo

Updating sport itself is no different. If a new version of sport is
released, grab the update via git, and then use sport to build it:

# cd sport.git
# INSTALLER=upgradepkg sport install sport

@node FAQs
@chapter FAQs

@cindex faq

Here are some answers to questions that I imagine people might
frequently ask, if they'd actually known that sport existed as I was
writing this FAQ section:

@enumerate Q
@item
Is sport a replacement for sbopkg?

@enumerate A
@item
Yes and No; you might find that you will want to use sport on some
days, and sbopkg on others, and sometimes neither! It just depends on
what your workflow is at any given moment, or what the needs are for a
particular package you are installing.

It's mostly a matter of taste, but at this point the two basically
achieve the same thing. That said, sbopkg can build queue files of
dependencies for you, so you might appreciate that feature. And
probably new features will arise that differeniate the two in the
further in the future.

@end enumerate
@end enumerate

@enumerate Q
@item
How do I uninstall?

@enumerate A
@item
If you want to remove sport entirely from your system, simply remove
the sport script from where ever you placed it (probably in
/usr/sbin), the man page from /usr/man/man8, and this info file from
/usr/info.

The easiest way to do that is to use removepkg:

# removepkg sport

@end enumerate
@end enumerate

@enumerate Q
@item
Does sport resolve dependencies for me?
@enumerate A
@item
No.
@end enumerate
@end enumerate

@enumerate Q
@item
When will sport be modified to resolve dependencies for me?
@enumerate A
@item
Currently it is on the roadmap for Never, with the possible exception
of the day Hell freezes over, in which case it will be brought up for review.
@end enumerate
@end enumerate

@enumerate Q
@item
How can I contact the author?
@enumerate A
@item
Email Klaatu at klaatu@@member.fsf.org
@end enumerate
@end enumerate


@c END

@node Index
@unnumbered Index
     
@printindex cp
     
@bye

