#!/bin/bash

## GPLv3
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

SBOPATH=/var/lib/sbopkg/SBo/14.0
MASTER="rsync://slackbuilds.org/slackbuilds/14.0/"
CATEGORY=$(echo "$2" | cut -f1 -d"/")
PKG_NAME=$(basename "$2" .tar.gz | cut -f2 -d"/")
CWD=$(pwd)

## are we in the SBo tree?
if [ X"$CATEGORY" == "X." ]
then CATEGORY=$(basename $CWD)
fi

## determine ARCH
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) SUFFIX="" ;;
    arm*) SUFFIX="_arm" ;;
  x86_64) SUFFIX="_x86_64" ;;
       *) SUFFIX=$( uname -m ) ;;
  esac
fi

build_pkg() {
    local FILE=${1##*/}
    if [ X$(cat $FILE.info | grep DOWNLOAD"$SUFFIX"= \
	| cut -f2 -d\") == "X" -a X$SUFFIX == "X_x86_64" ]
    then 
	ULINK=$(cat $FILE.info | grep DOWNLOAD= | cut -f2 -d\" )
	MD5CHECK=$(cat $FILE.info | grep MD5SUM= | cut -f2 -d\" )
    else
	ULINK=$(cat $FILE.info | grep DOWNLOAD"$SUFFIX"= | cut -f2 -d\" )
	MD5CHECK=$(cat $FILE.info | grep MD5SUM"$SUFFIX"= | cut -f2 -d\" )
    fi

    # download the sauce
    wget --no-clobber $ULINK

    local TARBALL=$(echo "$ULINK" | rev | cut -f1 -d"/" | rev )
    local MD5SUM=$(md5sum $TARBALL | cut -f1 -d" ")

    if [ "$MD5CHECK" != "$MD5SUM" ]
    then 
	echo "O.o md5sums do not match. Exiting." && exit
    fi

    chmod +x ./$FILE.SlackBuild
    ./$FILE.SlackBuild 2> /tmp/sport.log
}

syntax_chk() {
    local CHECK=${1}
    TEST=$(echo $CHECK | grep "/" | rev | cut -b1 )
    if [ X$TEST == "X" ]
 	then CATEGORY=$(basename $CWD)
    fi
}

untar_pkg() {
    if [ ! -d $SBOPATH/$CATEGORY/$PKG_NAME ] ; then
	tar -xf $SBOPATH/$CATEGORY/$PKG_NAME.tar.gz \
	    -C $SBOPATH/$CATEGORY/
    fi
}

arg_chk() {
# did we get all the info we need to run this script?
    local CHECK=${1}
    if [ $CHECK -lt 2 ]
    then
	echo " "
	echo "Syntax Error. sport needs a verb and a package name:"
	echo "sport search|cat|build|install|check PACKAGE"
	echo " "
	exit
    fi
}

# the script

case "$1" in
    search|--search|s|-s)
	arg_chk "$#"
	cd $SBOPATH
        CHECKER=$(echo "$2" | rev | cut -f1 -d"/" | rev)
        find $SBOPATH -iname *${CHECKER}*.tar.* \
	    | grep -v asc$ | rev | cut -f1,2 -d"/" | rev
	cd $CWD
	;;

    cat|--cat|c|-c)
	arg_chk "$#"
	syntax_chk "$2"
	untar_pkg
	echo " "
	echo "------------------------------------------"
	cat $SBOPATH/$CATEGORY/$PKG_NAME/{"$PKG_NAME".info,README}
	echo "------------------------------------------"
	echo " " 
	;;

    build|--build|b|-b)
	arg_chk "$#"
	syntax_chk "$2"
	untar_pkg
	cd $SBOPATH/$CATEGORY/$PKG_NAME
	build_pkg $PKG_NAME
	cd $CWD
	;;

    install|--install|i|-i)
	arg_chk "$#"
	syntax_chk "$2"
	untar_pkg
	cd $SBOPATH/$CATEGORY/$PKG_NAME
	build_pkg $PKG_NAME
	installpkg /tmp/$PKG_NAME*SBo*t?z
	cd $CWD
	;;

    clean|--clean|l|-l)
	arg_chk "$#"
	syntax_chk "$2"
	rm -r $SBOPATH/$CATEGORY/$PKG_NAME
	rm /tmp/$PKG_NAME*SBo*t?z
	tar -xf $SBOPATH/$CATEGORY/$PKG_NAME.tar.gz \
	    -C $SBOPATH/$CATEGORY/
	;;

    check|--check|k|-k)
        CHECKER=$(echo "$2" | rev | cut -f1 -d"/" | rev)
        find /var/log/packages/ -iname *"${CHECKER}"*
	;;

    rsync|--rsync|r|-r)
	rsync -av $MASTER $SBOPATH
	;;

    *)
    	echo " "
        echo "Syntax Error. sport needs a verb and a package name:"
	echo "sport search|cat|build|install|check PACKAGE"
	echo " "
        exit	
esac
