#!/bin/bash

## GPLv3
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [ -e /etc/sport.conf ]
then source /etc/sport.conf
else
    SBOPATH=${SBOPATH:-/var/lib/sbopkg/SBo/14.0}
    MASTER=${MASTER:-"rsync://slackbuilds.org/slackbuilds/14.0/"}
fi

INSTALLER=${INSTALLER:-echo}
CWD=$(pwd)
ABS="*"

#set -e

## determine arch SUFFIX
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
  x86_64) SUFFIX="_x86_64" ;;
       *) SUFFIX="" ;;
  esac
fi

build_pkg() {
    local FILE=${1##*/}
    if [ X$(cat $FILE.info | grep DOWNLOAD"$SUFFIX"= \
	| cut -f2 -d\") == "X" -a X$SUFFIX == "X_x86_64" ]
    then 
	ULINK=$(cat $FILE.info | grep DOWNLOAD= | cut -f2 -d\" )
	MD5CHECK=$(cat $FILE.info | grep MD5SUM= | cut -f2 -d\" )
    else
	ULINK=$(cat $FILE.info | grep DOWNLOAD"$SUFFIX"= | cut -f2 -d\" )
	MD5CHECK=$(cat $FILE.info | grep MD5SUM"$SUFFIX"= | cut -f2 -d\" )
    fi

    # download the sauce
    wget --no-clobber $ULINK
    local TARBALL=$(echo "$ULINK" | rev | cut -f1 -d"/" | rev )
    local MD5SUM=$(md5sum $TARBALL | cut -f1 -d" ")

    if [ "$MD5CHECK" != "$MD5SUM" ]
    then 
	echo "Expected sum " $MD5CHECK
	echo "What we got: " $MD5SUM
	echo "O.o md5sums do not match. Continue? [Y/n]"
	read CONTINUE
	if [ X$(echo $CONTINUE | tr [:upper:] [:lower:] | cut -b1) != "Xy" ]
	then exit
	else
	    echo "Boldly continuing with build..."
	fi
    fi

    chmod +x ./$FILE.SlackBuild
    ./$FILE.SlackBuild 2> /tmp/sport.log
}

untar_pkg() {
    if [ ! -d $SBOPATH/$CATEGORY/$PKG_NAME ] ; then
	tar -xf $SBOPATH/$CATEGORY/$PKG_NAME.tar.gz \
	    -C $SBOPATH/$CATEGORY/ 2> /dev/null || echo \
	    "Errors were found; check the package name, and provide the category." \
	    && exit
    fi
}

cat_finder() {
    i=0
    for COUNT in $(find $SBOPATH -iname "$ABS""$item".tar.gz )
    do let i++
	echo $COUNT
    done

    if [ $i -gt 1 ]
    then echo""
    echo "More than one package matches your query."
    echo "Specify category and canonical pkg name."
    echo "Example: sport -c games/nethack"
    exit
    else
	SLASH=$(echo $item | grep "/")
	if [ -n "$SLASH" ]
	then CATEGORY=$(echo $item | cut -f1 -d"/")
	else
	    CATEGORY=$(find $SBOPATH -iname "$ABS""$item".tar.gz | rev | cut -f2 -d"/" | rev )
	fi
    fi
}

### user interactions below
while [ True ]; do
if [ "$1" = "search" -o "$1" = "--search" -o "$1" = "-s" -o "$1" = "s" ]; then 
    MODE=searchmode
    shift 1
elif [ "$1" = "check" -o "$1" = "--check" -o "$1" = "-k" -o "$1" = "k" ]; then 
    MODE=checkmode
    shift 1
elif [ "$1" = "list" -o "$1" = "--list" -o "$1" = "-l" -o "$1" = "l" -o "$1" = "ls" ]; then 
    MODE=listmode
    shift 1
elif [ "$1" = "cat" -o "$1" = "--cat" -o "$1" = "-c" -o "$1" = "c" ]; then 
    MODE=catmode
    shift 1
elif [ "$1" = "queue" -o "$1" = "--queue" -o "$1" = "-q" -o "$1" = "q" ]; then 
    MODE=queuemode
    shift 1
elif [ "$1" = "install" -o "$1" = "--install" -o "$1" = "-i" -o "$1" = "i" ]; then 
    MODE=installmode
    shift 1
elif [ "$1" = "rsync" -o "$1" = "--rsync" -o "$1" = "-r" -o "$1" = "r" ]; then 
    rsyncmode=1
    test -d $SBOPATH || mkdir -p $SBOPATH
    rsync -av $MASTER $SBOPATH
    shift 1
elif [ "$1" = "build-only" -o "$1" = "build" -o "$1" = "--build-only" -o "$1" = "-b" -o "$1" = "b" ]; then
    buildmode=1
    shift 1
elif [ "$1" = "clean" -o "$1" = "--clean" -o "$1" = "-n" -o "$1" = "n" ]; then 
    cleanmode=1
    cat_finder "$item"
    rm -r $SBOPATH/$CATEGORY/$PKG_NAME
    rm /tmp/$PKG_NAME*SBo*t?z 2> /dev/null
    tar -xf $SBOPATH/$CATEGORY/$PKG_NAME.tar.gz \
	-C $SBOPATH/$CATEGORY/
    shift 1
else
    break
fi
done

# everything else left at this point
# SHOULD be a package name, so..
# build an array of packages
ARG=(${@})

###### Main Loop
n=0
while [ True ]; do
    for item in ${ARG[@]}; do

	CATEGORY=$(echo "$item" | cut -f1 -d"/")
	PKG_NAME=$(basename "$item" .tar.gz | cut -f2 -d"/")

	unset ARG[${n}]
	let n++

	if [ "X$MODE" == "Xsearchmode" ]; then
	    cd $SBOPATH
            QUERY=$(echo "$item" | rev | cut -f1 -d"/" | rev)
	    # this separates searches when multiple searches are performed
	    # you can remove it if it bugs you
	    echo "---------------$QUERY---------------------------"
	    for RESULT in $(find $SBOPATH -iname "*${QUERY}*.tar.*" | grep -v asc$ | rev | cut -f1,2 -d"/" | rev); do
		echo -e "$RESULT%"$(tar -xf $SBOPATH/$RESULT -O 2>/dev/null | \
		    grep handy-ruler -A1 | cut -f2 -d":" | tail -n1) ; done | column -s% -t
	    cd $CWD
	fi

	if [ "X$MODE" == "Xcheckmode" ]; then
	    CHECKER=$(echo "$item" | rev | cut -f1 -d"/" | rev)
            find /var/log/packages/ -iname *"${CHECKER}"*
	fi
    
	if [ "X$MODE" == "Xlistmode" ]; then
	    if [ X"$item" != "X" ]
            then
		QUERY=$(echo "$item" | rev | cut -f1 -d"/" | rev)
		for RESULT in $(ls $SBOPATH/$QUERY | grep tar.gz | grep -v asc$ );
		do echo -e "$RESULT%"$(tar -xf $SBOPATH/$QUERY/$RESULT -O 2>/dev/null | \
		    grep handy-ruler -A1 | cut -f2 -d":" | tail -n1) ; done | column -s% -t
            else
		ls $SBOPATH
            fi
	fi
	
	if [ "X$MODE" == "Xcatmode" ]; then
	    cat_finder "$item"
	    echo " "
	    echo "------------------------------------------"
	    cat $SBOPATH/$CATEGORY/*$PKG_NAME/*{.info,README}
	    echo "------------------------------------------"
	    echo " " 
	fi
	
	if [ "X$MODE" == "Xqueuemode" ]; then
	    echo $(date) > /tmp/sport.queue.log 

	#echo "Install packages after building? [y/N]"
	#read CONTINUE
	#if [ X$(echo $CONTINUE | tr [:upper:] [:lower:] | cut -b1) != "Xy" ]
	#then FINISHER="echo"
	#else
	#    FINISHER="installpkg"
	#fi

	    for ITEM in $(< $item)
	    do
		PKG_NAME=$(echo $ITEM | rev | cut -f1 -d"/" | rev)
		ABS=""
		cat_finder "$ITEM"
		cd $SBOPATH/$CATEGORY/$PKG_NAME
		build_pkg $PKG_NAME
		$INSTALLER /tmp/$PKG_NAME*SBo*t?z
		echo $PKG_NAME >> /tmp/sport.queue.log
		cd $CWD
	    done
	fi

	if [ "X$MODE" == "Xinstallmode" ]; then
	    cat_finder "$item"
	    untar_pkg
	    cd $SBOPATH/$CATEGORY/$PKG_NAME
	    build_pkg $PKG_NAME
	    if [ "X$buildmode" != "X1" ]; then
		installpkg /tmp/$PKG_NAME*SBo*t?z
	    fi
	    cd $CWD
	fi

	ARRAYSIZE=${#ARG[*]}
	if [ "X$ARRAYSIZE" == "X0" ]; then
	    exit
	fi

    done
done

