#!/bin/bash

## GPLv3
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

################################
# set your SBOPATH here.       #
# do NOT use a trailing slash. #
################################
SBOPATH=${SBOPATH:-/var/lib/sbopkg/SBo/14.0}
#SBOPATH=${SBOPATH:-/usr/ports}
#SBOPATH=${SBOPATH:-/usr/slackbuilds}

#############################################
# Set the source of your SlackBuild tree.   #
# Include a trailing slash                  #
#############################################
MASTER=${MASTER:-"rsync://slackbuilds.org/slackbuilds/14.0/"}


#################################
# End User Configuration Block  #
#################################
CATEGORY=$(echo "$2" | cut -f1 -d"/")
PKG_NAME=$(basename "$2" .tar.gz | cut -f2 -d"/")
INSTALLER=${INSTALLER:-echo}
CWD=$(pwd)
ABS="*"

#set -e

## determine arch SUFFIX
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) SUFFIX="" ;;
    arm*) SUFFIX="_arm" ;;
  x86_64) SUFFIX="_x86_64" ;;
       *) SUFFIX=$( uname -m ) ;;
  esac
fi

build_pkg() {
    local FILE=${1##*/}
    if [ X$(cat $FILE.info | grep DOWNLOAD"$SUFFIX"= \
	| cut -f2 -d\") == "X" -a X$SUFFIX == "X_x86_64" ]
    then 
	ULINK=$(cat $FILE.info | grep DOWNLOAD= | cut -f2 -d\" )
	MD5CHECK=$(cat $FILE.info | grep MD5SUM= | cut -f2 -d\" )
    else
	ULINK=$(cat $FILE.info | grep DOWNLOAD"$SUFFIX"= | cut -f2 -d\" )
	MD5CHECK=$(cat $FILE.info | grep MD5SUM"$SUFFIX"= | cut -f2 -d\" )
    fi

    # download the sauce
    wget --no-clobber $ULINK
    local TARBALL=$(echo "$ULINK" | rev | cut -f1 -d"/" | rev )
    local MD5SUM=$(md5sum $TARBALL | cut -f1 -d" ")

    if [ "$MD5CHECK" != "$MD5SUM" ]
    then 
	echo "Expected sum " $MD5CHECK
	echo "What we got: " $MD5SUM
	echo "O.o md5sums do not match. Continue? [Y/n]"
	read CONTINUE
	if [ X$(echo $CONTINUE | tr [:upper:] [:lower:] | cut -b1) != "Xy" ]
	then exit
	else
	    echo "Boldly continuing with build..."
	fi
    fi

    chmod +x ./$FILE.SlackBuild
    ./$FILE.SlackBuild 2> /tmp/sport.log
}

untar_pkg() {
    if [ ! -d $SBOPATH/$CATEGORY/$PKG_NAME ] ; then
	tar -xf $SBOPATH/$CATEGORY/$PKG_NAME.tar.gz \
	    -C $SBOPATH/$CATEGORY/ 2> /dev/null || echo \
	    "Errors were found; check the package name, and provide the category." \
	    && exit
    fi
}

cat_finder() {
    local CHECK=${1}
    i=0
    for COUNT in $(find $SBOPATH -iname "$ABS""$CHECK".tar.gz )
    do let i++
	echo $COUNT
    done

    if [ $i -gt 1 ]
    then echo""
    echo "More than one package matches your query."
    echo "Specify category and canonical pkg name."
    echo "Example: sport -c games/nethack"
    exit
    else
	SLASH=$(echo $CHECK | grep "/")
	if [ -n "$SLASH" ]
	then CATEGORY=$(echo $CHECK | cut -f1 -d"/")
	else
	    CATEGORY=$(find $SBOPATH -iname "$ABS""$CHECK".tar.gz | rev | cut -f2 -d"/" | rev )
	fi
    fi
}

### user interactions below

case "$1" in
    search|--search|s|-s)
	cd $SBOPATH
        QUERY=$(echo "$2" | rev | cut -f1 -d"/" | rev)
	for RESULT in $(find $SBOPATH -iname *${QUERY}*.tar.* \
	    | grep -v asc$ | rev | cut -f1,2 -d"/" | rev);
	    do echo -e "$RESULT%"$(tar -xf $SBOPATH/$RESULT -O 2>/dev/null | \
		grep handy-ruler -A1 | cut -f2 -d":" | tail -n1) ; done | column -s% -t
	cd $CWD
	;;

    check|--check|k|-k)
        CHECKER=$(echo "$2" | rev | cut -f1 -d"/" | rev)
        find /var/log/packages/ -iname *"${CHECKER}"*
	;;

    rsync|--rsync|r|-r)
	rsync -av $MASTER $SBOPATH
	;;

    list|--list|l|ls|-l)
        if [ X"$2" != "X" ]
        then
        QUERY=$(echo "$2" | rev | cut -f1 -d"/" | rev)
        for RESULT in $(ls $SBOPATH/$QUERY | grep tar.gz | grep -v asc$ );
        do echo -e "$RESULT%"$(tar -xf $SBOPATH/$QUERY/$RESULT -O 2>/dev/null | \
	    grep handy-ruler -A1 | cut -f2 -d":" | tail -n1) ; done | column -s% -t
        else
            ls $SBOPATH
        fi
        ;;

# everything below needs to inherit CATEGORY
    cat|--cat|c|-c)
	cat_finder "$2"
	#untar_pkg
	echo " "
	echo "------------------------------------------"
	cat $SBOPATH/$CATEGORY/*$PKG_NAME/*{.info,README}
	echo "------------------------------------------"
	echo " " 
	;;

    build|--build|b|-b)
	cat_finder "$2"
	untar_pkg
	cd $SBOPATH/$CATEGORY/$PKG_NAME
	build_pkg $PKG_NAME
	$INSTALLER /tmp/$PKG_NAME*SBo*t?z
	cd $CWD
	;;

    queue|--queue|q|-q)
	echo $(date) > /tmp/sport.queue.log 

	#echo "Install packages after building? [y/N]"
	#read CONTINUE
	#if [ X$(echo $CONTINUE | tr [:upper:] [:lower:] | cut -b1) != "Xy" ]
	#then FINISHER="echo"
	#else
	#    FINISHER="installpkg"
	#fi

	for ITEM in $(< $2)
	do
	    PKG_NAME=$(echo $ITEM | rev | cut -f1 -d"/" | rev)
	    ABS=""
	    cat_finder "$ITEM"
	    cd $SBOPATH/$CATEGORY/$PKG_NAME
	    build_pkg $PKG_NAME
	    $INSTALLER /tmp/$PKG_NAME*SBo*t?z
	    echo $PKG_NAME >> /tmp/sport.queue.log
	    cd $CWD
	done
	;;

    install|--install|i|-i)
	cat_finder "$2"
	untar_pkg
	cd $SBOPATH/$CATEGORY/$PKG_NAME
	build_pkg $PKG_NAME
	installpkg /tmp/$PKG_NAME*SBo*t?z
	cd $CWD
	;;

    clean|--clean|n|-n)
	cat_finder "$2"
	rm -r $SBOPATH/$CATEGORY/$PKG_NAME
	rm /tmp/$PKG_NAME*SBo*t?z 2> /dev/null
	tar -xf $SBOPATH/$CATEGORY/$PKG_NAME.tar.gz \
	    -C $SBOPATH/$CATEGORY/
	;;

    *)
    	echo " "
        echo "sport needs a subcommand and a package name:"
	echo "sport search|cat|build|install|check|rsync|clean PACKAGE"
	echo "try 'man sport' or 'info sport' for more"
	echo " "
        exit	
esac
