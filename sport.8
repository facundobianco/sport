.\" sport - Slackware Port
.TH "sport" "8" ""  "Klaatu" ""
.SH "NAME"
sport \- Search, research, and install from your collection of SlackBuilds
.SH "SYNOPSIS"
\fBsport\fP [command] [package]
.SH "DESCRIPTION"
.PP 
\fBsport\fP, or "Slackware Port", is a BSD Port style tool that helps
you search through your collection of SlackBuilds, read relevant files
about each SlackBuild, and execute the build and install processes.
.PP
.SH USE CASE AND WORKFLOW
The intended use of \fBsport\fP is the same as [my use of] BSD Port or
Gentoo's Emerge, although the exact commands are unique since the BSD
Port system weilds Makefiles to execute its commands, and Gentoo uses
ebuilds, while SlackBuilds use shell scripts.
.PP
The workflow can be similar: as root, change directory into your
SlackBuild tree, search for the package you wish to install, and then
build and install.
.PP
(Strictly speaking, you do not have to change directory into your
SlackBuilds tree, although if you're used to BSD Ports then you'll
likely do that habitually.)
.SH INSTALLATION
To install sport, use the included SlackBuild file, or just copy sport
to some directory in your path. The recommended location is /usr/sbin
.PP
Copy the man page to /usr/man/man8 and the info page to /usr/info. If
you are reading this, you may have already done that.
.PP
You might need to set the location of your SlackBuild tree by manually
editing the sport script, and the source of that tree so that you can
stay in sync with your source. You can obtain every script available on
SlackBuilds.org tree using rsync(1). You might place your SlackBuild
tree in /usr/slackbuilds to mimic the common BSD Ports location of
/usr/ports or you may already have a tree in /var/lib/sbopkg/SBo/??.?
if you are already an sbopkg user.
.PP
Now you are ready to use sport.
.SH COMMANDS 
.PP
.TP
.B search, --search, s, -s
Performs a fuzzy search for some package. For example\&:
.IP
sport search w3m\&
.IP
Search is always fuzzy and never needs a category or wildcard. It
returns the location within your tree of all matches, plus a brief
description.
.PP
.TP
.B list, --list, l, ls, -l
Lists the contents of your SlackBuild tree. Without arguments, it
lists everything in the base path, for example\&:
.IP
sport list\&
.IP
Or you can provide a folder from within your base path\&:
.IP
sport list audio\& | less
.IP
would list all the contents of the audio directory within your
SlackBuild tree. You will probably want to pipe this through less(1).
.PP
.TP 
.B cat, --cat, c, -c
Displays the README and \&.info files of some package. You want to
do this before building, since the README provides optional dependency
information and build instructions, and the .info file provides
required dependencies.
.IP
Obviously if the package you want to install has dependencies, you
should resolve those dependencies before continuing. Unlike the BSD
Ports systems, \fBsport\fP does NOT resolve dependencies for you.
.IP
The cat command will untar the SlackBuild directory if needed.
.IP
Assuming the package name is unique:
.IP
sport cat ophcrack 
.IP
If there are multiple matches, then you will need to provide the path
to the package from your SBOPATH (what Gentoo calls the "atom"); for
instance:
.IP
sport cat network/w3m
.IP
If you are in your SlackBuild tree, you can just provide the atomic
path to the package with a dot-slash:
.IP
sport cat ./w3m
.PP
.TP 
.B build, --build, b, -b
Downloads (if needed) and executes the SlackBuild for some package. It
does not install the resulting package, leaving it instead in whatever
directory the SlackBuild places it (default from SlackBuilds.org is
/tmp). Use installpkg to install the package at your leisure.
.IP
As with \fBcat\fP, you can just provide the package name:
.IP
sport build ./w3m
.IP
Unless there are mulitple potential matches, in which case you must
provide the path to the package from your SBOPATH. For instance:
.IP
sport build network/w3m
.IP
The \fBbuild\fP option is flexible and can be given an INSTALLER
variable so that you can control what happens after the code is
compiled. The default is to do nothing, but you could use it to
upgrade packages:
.IP
INSTALLER=upgradepkg build network/w3m 
.IP
Or even something more complex, like:
.IP
INSTALLER="upgradepkg --install-new" sport b net*/w3m
.PP
.TP
.B install, --install, i, -i
Downloads (if needed) and executes the SlackBuild for some package,
and then calls installpkg to install it to your system.
.IP
As with \fBcat\fP and \fBbuild\fP commands, you can provide the path
from your current location if you are in your SlackBuilds tree;
otherwise, provide the path from SBOPATH.
.PP
.TP 
.B check, --check, k, -k
Checks /var/log/packages to see if a package is installed. Very fuzzy
search; not meant to replace pkgtool, just a convenience.
.PP
.TP
.B queue, --queue, q, -q
Processes a queue or batch file.
.IP
Creating a queue file is simple. Just list the packages in the order
you wish them to be installed in a plain text file, one package per
line. It is safest to use both the category and package name but if
the package name is unique you can list it alone.
.IP
For example, in a file arbitrarily called w3m.list, you may place some
lines of package names:
.RS
.sp
development/gc
.br
libraries/imlib2
.br
network/w3m
.RE       
.IP
And to process this queue file, you would use:
.IP
sport queue w3m.list
.IP
By default, sport only builds the packages and does not install
them. To make sport install the packages after it builds each one,
pass an INSTALLER variable:
.IP
INSTALLER=installpkg sport queue w3m.list
.IP
You can utilize this to upgrade a sequence of packages; if you are
upgrading ffmpeg, for instance, and want to also upgrade all of its
many codecs, you could create a queue file that will rebuild all of
the necessary componenets:
.IP
MAKEOPTS="-j6" INSTALLER=upgradepkg sport q ffmpeg.list
.PP
.TP
.B clean, --clean, l, -l
Removes the directory containing the source code and SlackBuild. It of
course leaves any compressed copy of your SlackBuild directory (the
SlackBuild.org structure). If you are not using the SlackBuild.org
tree, then you should either keep your originals as compressed
archives or do you should probably not use the \fBclean\fP command.
.PP
.TP
.B rsync, --rsync, r, -r
Synchronizes your local tree with your source tree, as defined in the
sport script itself. By default sport is set to use the same paths
that sbopkg institutes. If you are not using sbopkg then you may
change this manually.
.IP
sport rsync
.IP
Pulls in any updates for your tree via rsync.

.SH UPDATES
.TP
Updating applications in Slackware is usually done with
.PP
# upgradepkg /tmp/example-0.2-noarch-1_SBo.tgz
.PP
Updating via sport is no different. For example, if version 99 of
sport has just been released, you would download it and use sport to build
it:
.PP
# sport build ./sport.SlackBuild
.PP
And then use upgradepkg to install:
.PP
# upgradepkg /tmp/sport*99*tgz 

.SH "SEE ALSO"
.nf
.I slackpkg (8)
.I pkgtool (8)
.I installpkg (8)
.URL http://slackermedia.info/sport
.URL http://gitorious.org/slackport
.fi

.PP
.SH "AUTHORS"
.nf
Klaatu (klaatu@member.fsf.org)
.fi

.PP
.SH "BUGS"
Report via email or on gitorious.org. Also feel free to fix them and
request a merge.
.fi
